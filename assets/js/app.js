"use strict";

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

// Generated by CoffeeScript 2.3.2
var Bus,
    DEBUG,
    Filter,
    Preloader,
    RELOAD,
    TIMERS,
    TRIGGERS,
    auth_data_app,
    filter_panel_data_app,
    getJsonData,
    main,
    menu_nav_data_app,
    panel_data_app,
    point_was_changed,
    postJsonData,
    postJsonWithData,
    tools_data_app,
    indexOf = [].indexOf;
DEBUG = false;
TIMERS = {};
TRIGGERS = {};
RELOAD = window.RELOAD = {
  css: function css(name, cb) {
    var _href, css_dom, reload_css;

    css_dom = document.querySelector("link[href^=\"/assets/css/".concat(name, "\"]"));

    if (css_dom) {
      css_dom.remove();
      reload_css = document.createElement('link');
      reload_css.rel = "stylesheet";
      reload_css.type = "text/css";
      reload_css.media = "all";
      _href = "/assets/css/".concat(name, ".css?").concat(new Date().getTime());
      reload_css.href = _href;

      reload_css.onload = function () {
        if (cb) {
          cb();
        }
      };

      document.body.append(reload_css);
    }
  }
};
document.addEventListener("click", function (event) {
  if (TRIGGERS['panel'] != null) {
    return;
  }

  if (TIMERS['dropdown'] != null) {
    clearTimeout(TIMERS.dropdown);
    TIMERS.dropdown = null;
  }

  TIMERS.dropdown = setTimeout(function () {
    var items;
    items = [].slice.call(document.querySelectorAll('.mui--is-open'));

    if (items.length > 0) {
      document.body.style.overflow = "hidden";
    } else {
      document.body.style.overflow = "";
    }
  }, 200);
});
document.addEventListener("DOMContentLoaded", function (event) {
  var map_dom, yscript;
  Preloader.label('добро пожаловать в систему RISKI');
  map_dom = document.getElementById('map');

  if (map_dom) {
    if (map_dom.dataset.yanmapapi) {
      yscript = document.createElement('script');
      yscript.src = "https://api-maps.yandex.ru/2.1?lang=ru_RU&apikey=".concat(map_dom.dataset.yanmapapi);

      yscript.onload = function () {
        main();
      };

      yscript.onerror = function () {
        console.log("load error:");
        main();
      };

      document.body.appendChild(yscript);
    } else {
      main();
    }
  } else {
    main();
  }
});

point_was_changed = function point_was_changed() {
  console.log("point_was_changed");

  if (PMap) {
    if (window.point_temp) {
      PMap.geoObjects.remove(window.point_temp);
    }
  }

  Bus.$emit("pointWasChangedRun");
};

window.addEventListener('load', function (event) {
  Preloader.label("переключаем интерфейс");
  setTimeout(function () {
    var YMap;
    Preloader.disable();
    YMap = window.YMap || null;

    if (YMap) {
      return YMap.container.fitToViewport();
    }
  }, 300);
});

getJsonData = function getJsonData(url, cb) {
  if (DEBUG) {
    console.log("getJsonData run:", url);
  }

  $.ajax({
    url: url,
    type: 'GET',
    contentType: "application/json; charset=utf-8",
    cache: true,
    success: function success(res) {
      if (DEBUG) {
        console.log("getJsonData res:", res);
      }

      if (res.data["code"] != null) {
        if (res.data.code === 1) {
          Bus.$emit('modal_info_show_auth_run');
        }
      }

      if (cb) {
        cb(res);
      }
    },
    error: function error(err) {
      console.error(err);
    }
  });
};

postJsonData = function postJsonData(url, cb) {
  if (DEBUG) {
    console.log("postJsonData run:", url);
  }

  $.ajax({
    url: url,
    type: 'POST',
    contentType: "application/json; charset=utf-8",
    cache: true,
    success: function success(res) {
      if (DEBUG) {
        console.log("postJsonData res:", res);
      }

      if (res.data["code"] != null) {
        if (res.data.code === 1) {
          Bus.$emit('modal_info_show_auth_run');
        }
      }

      if (cb) {
        cb(res);
      }
    },
    error: function error(err) {
      console.error(err);
    }
  });
};

postJsonWithData = function postJsonWithData(url, data, cb) {
  if (DEBUG) {
    console.log("postJsonWithData run:", data);
  }

  $.ajax({
    url: url,
    type: 'POST',
    contentType: "application/json; charset=utf-8",
    dataType: 'json',
    data: JSON.stringify(data),
    cache: true,
    success: function success(res) {
      if (DEBUG) {
        console.log("postJsonWithData res:", res);
      }

      if (res.data["code"] != null) {
        if (res.data.code === 1) {
          Bus.$emit('modal_info_show_auth_run');
        }
      }

      if (cb) {
        cb(res);
      }
    },
    error: function error(err) {
      console.error(err);
    }
  });
};

Filter =
/*#__PURE__*/
function () {
  function Filter() {
    _classCallCheck(this, Filter);

    this.filters = {
      or: {},
      or2: {},
      and: {},
      and2: {},
      orand: {},
      andor: {}
    };
  }

  _createClass(Filter, [{
    key: "add",
    value: function add(type_group, name, params_name, condition, value) {
      if (type_group === 'orand') {
        if (this.filters[type_group].hasOwnProperty(name)) {
          this.filters[type_group][name].push(["properties.".concat(params_name), condition, value]);
        } else {
          this.filters[type_group][name] = [];
          this.filters[type_group][name].push(["properties.".concat(params_name), condition, value]);
        }
      } else if (type_group === 'andor') {
        if (this.filters[type_group].hasOwnProperty(name)) {
          this.filters[type_group][name].push(["properties.".concat(params_name), condition, value]);
        } else {
          this.filters[type_group][name] = [];
          this.filters[type_group][name].push(["properties.".concat(params_name), condition, value]);
        }
      } else {
        this.filters[type_group][name] = ["properties.".concat(params_name), condition, value];
      }

      return this;
    }
  }, {
    key: "remove",
    value: function remove(type_group, name, value, inverse) {
      var i, index, j, len, len1, ref, row, self, to_remove_index;
      inverse = inverse != null ? inverse : false;
      self = this;

      if (type_group === 'orand') {
        delete self.filters[type_group][name]; //to_remove_index = []
        //for row, index in @filters[type_group][name]
        //do (row, index, value) ->
        //if inverse
        //if row[0] is ["properties", value].join('.')
        //to_remove_index.push index
        //else
        //if row[2] is value
        //to_remove_index.push index
        //return
        //for index in to_remove_index
        //do (index) ->
        //self.filters[type_group][name].splice index, 1
        //return
        //if @filters[type_group][name].length is 0
        //delete @filters[type_group][name]
      } else if (type_group === 'andor') {
        to_remove_index = [];
        ref = this.filters[type_group][name];

        for (index = i = 0, len = ref.length; i < len; index = ++i) {
          row = ref[index];

          (function (row, index, value) {
            if (inverse) {
              if (row[0] === ["properties", value].join('.')) {
                to_remove_index.push(index);
              }
            } else {
              if (row[2] === value) {
                to_remove_index.push(index);
              }
            }
          })(row, index, value);
        }

        for (j = 0, len1 = to_remove_index.length; j < len1; j++) {
          index = to_remove_index[j];

          (function (index) {
            self.filters[type_group][name].splice(index, 1);
          })(index);
        }

        if (this.filters[type_group][name].length === 0) {
          delete this.filters[type_group][name];
        }
      } else {
        try {
          delete this.filters[type_group][name];
        } catch (error) {}
      }

      return this;
    }
  }, {
    key: "reset",
    value: function reset() {
      this.filters = {
        or: {},
        or2: {},
        and: {},
        and2: {},
        orand: {},
        andor: {}
      };
    }
  }, {
    key: "names",
    value: function names() {
      return {
        and: Object.keys(this.filters.and),
        and2: Object.keys(this.filters.and2),
        or: Object.keys(this.filters.or),
        or2: Object.keys(this.filters.or2),
        orand: Object.keys(this.filters.orand),
        andor: Object.keys(this.filters.andor)
      };
    }
  }, {
    key: "query",
    value: function query() {
      var _q_and, _q_and2, _q_or, _q_or2, d, dd, i, j, len, len1, name, p, qq, query, query_and, query_and2, query_andor, query_or, query_or2, query_orand, ref, ref1, ref2, ref3, ref4, ref5, s, v, value, x, xx;

      query = [];
      query_or = [];
      query_or2 = [];
      query_and = [];
      query_and2 = [];
      query_orand = [];
      query_andor = [];
      ref = this.filters.or;

      for (name in ref) {
        value = ref[name];
        query_or.push(this.filters.or[name].join(' '));
      }

      ref1 = this.filters.or2;

      for (name in ref1) {
        value = ref1[name];
        query_or2.push(this.filters.or2[name].join(' '));
      }

      ref2 = this.filters.and;

      for (name in ref2) {
        value = ref2[name];
        query_and.push(this.filters.and[name].join(' '));
      }

      ref3 = this.filters.and2;

      for (name in ref3) {
        value = ref3[name];
        query_and2.push(this.filters.and2[name].join(' '));
      }

      p = null;
      s = null;
      d = [];
      ref4 = this.filters.orand;

      for (name in ref4) {
        value = ref4[name];
        p = [];

        for (i = 0, len = value.length; i < len; i++) {
          v = value[i];

          (function (v) {
            p.push(v.join(' '));
          })(v);
        }

        s = "(".concat(p.join(' && '), ")");
        d.push(s);
      }

      dd = "(".concat(d.join(' || '), ")");
      p = null;
      s = null;
      x = [];
      ref5 = this.filters.andor;

      for (name in ref5) {
        value = ref5[name];
        p = [];

        for (j = 0, len1 = value.length; j < len1; j++) {
          v = value[j];

          (function (v) {
            p.push(v.join(' '));
          })(v);
        }

        s = "(".concat(p.join(' || '), ")");
        x.push(s);
      }

      xx = "(".concat(x.join(' && '), ")");

      if (query_or.length > 0) {
        _q_or = "(".concat(query_or.join(' || '), ")");
      } else {
        _q_or = true;
      }

      if (query_or2.length > 0) {
        _q_or2 = "(".concat(query_or2.join(' || '), ")");
      } else {
        _q_or2 = true;
      }

      if (query_and.length > 0) {
        _q_and = "(".concat(query_and.join(' && '), ")");
      } else {
        _q_and = true;
      }

      if (query_and2.length > 0) {
        _q_and2 = "(".concat(query_and2.join(' && '), ")");
      } else {
        _q_and2 = true;
      }

      query = [_q_or, _q_and, _q_or2, _q_and2];
      qq = query.join(' && ');

      if (d.length > 0) {
        qq += " && ".concat(dd);
      }

      if (x.length > 0) {
        qq += " && ".concat(xx);
      }

      return qq;
    }
  }, {
    key: "make",
    value: function make() {
      if (typeof ObjectManagerGroup !== 'undefined') {
        ObjectManagerGroup.setFilter(this.query());
      }

      return this;
    }
  }], [{
    key: "new",
    value: function _new() {
      var filter;
      filter = new Filter();
      return filter;
    }
  }]);

  return Filter;
}();

Preloader = window.Preloader = {
  disable: function disable() {
    var preload_dom;
    preload_dom = document.querySelector('[data-window="preloader"]');
    preload_dom.classList.add("animated", "fadeOut");
    setTimeout(function () {
      return preload_dom.classList.add('hide');
    }, 1100);
  },
  enable: function enable() {
    var preload_dom;
    preload_dom = document.querySelector('[data-window="preloader"]');
    preload_dom.classList.remove("fadeOut");
    preload_dom.classList.add("animated", "fadeIn");
    preload_dom.classList.remove('hide');
  },
  label: function label(text) {
    var label;
    label = document.querySelector("[data-label=\"preloader\"]");
    label.textContent = text;
  }
};
Bus = new Vue();
tools_data_app = {
  data: function data() {
    var _window$_tdata;

    var _data;

    _data = window._tdata = (_window$_tdata = {
      stats: {
        "1": 0,
        "2": 0,
        "3": 0,
        "4": 0
      },
      buttons: {
        state_icons: {
          st1: {
            "fa-circle": true,
            "fa-circle-o": false
          },
          st2: {
            "fa-circle": true,
            "fa-circle-o": false
          },
          st3: {
            "fa-circle": true,
            "fa-circle-o": false
          },
          dogovors: {
            "fa-square": false,
            "fa-square-o": true
          },
          companies: {
            "fa-circle": false,
            "fa-circle-o": true
          }
        }
      },
      panel: {
        first: {
          class: {
            hide: true
          }
        },
        second: {
          class: {
            hide: true
          }
        },
        third: {
          class: {
            hide: true
          }
        }
      },
      filters: {
        states: {
          "1": true,
          "2": true,
          "3": true,
          "4": true,
          count: 0
        },
        companies: {
          toggle: false,
          alreadyInGroup: false
        },
        dogovors: {
          toggle: false,
          alreadyInGroup: false
        }
      },
      row: {
        id: "",
        number: "",
        name: "",
        description: "",
        region_id: "",
        address: "",
        state: "",
        state_id: ""
      },
      modalClass: {
        hide: true
      },
      modalInfoClass: {
        hide: true
      },
      modal_info: {
        title: "",
        stats: false,
        auth: false,
        panel: false,
        filter: false
      },
      numbers: [],
      numbers_in_filters: []
    }, _defineProperty(_window$_tdata, "stats", {}), _defineProperty(_window$_tdata, "timers", {}), _defineProperty(_window$_tdata, "class_fps", {}), _defineProperty(_window$_tdata, "class_fps_changed", {}), _defineProperty(_window$_tdata, "departments", {}), _defineProperty(_window$_tdata, "departments_changed", {}), _defineProperty(_window$_tdata, "types", {}), _defineProperty(_window$_tdata, "types_changed", {}), _defineProperty(_window$_tdata, "companies", {}), _defineProperty(_window$_tdata, "companies_changed", {}), _defineProperty(_window$_tdata, "services", {}), _defineProperty(_window$_tdata, "services_changed", {}), _defineProperty(_window$_tdata, "regions", {}), _defineProperty(_window$_tdata, "regions_changed", {}), _defineProperty(_window$_tdata, "object_names", []), _defineProperty(_window$_tdata, "object_names_in_filters", []), _defineProperty(_window$_tdata, "ch_counter_objects_state", null), _defineProperty(_window$_tdata, "ch_counter_objects", null), _defineProperty(_window$_tdata, "ch_counter_catalogs", null), _defineProperty(_window$_tdata, "user", {}), _defineProperty(_window$_tdata, "point_temp", null), _window$_tdata);
    window._data = _data;
    return _data;
  },
  template: null,
  methods: {
    toggle_panel_all: function toggle_panel_all() {
      if (this.panel.first.class.hide === false || this.panel.second.class.hide === false || this.panel.third.class.hide === false) {
        this.panel.first.class.hide = true;
        this.panel.second.class.hide = true;
        this.panel.third.class.hide = true;
      } else {
        this.panel.first.class.hide = false;
      }
    },
    toggle_panel_first: function toggle_panel_first() {
      switch (this.panel.first.class.hide) {
        case true:
          this.panel.first.class.hide = false;
          break;

        case false:
          this.panel.first.class.hide = true;
      }
    },
    toggle_panel_second: function toggle_panel_second() {
      switch (this.panel.second.class.hide) {
        case true:
          this.panel.second.class.hide = false;
          break;

        case false:
          this.panel.second.class.hide = true;
      }
    },
    toggle_panel_third: function toggle_panel_third() {
      switch (this.panel.third.class.hide) {
        case true:
          this.panel.third.class.hide = false;
          this.panel.first.class.hide = true;
          document.querySelector("[data-target=\"search_with_name_object\"]").focus();
          break;

        case false:
          this.panel.third.class.hide = true;
          this.panel.first.class.hide = false;
      }
    },
    modal_info_show: function modal_info_show(need) {
      var self;
      self = this;

      if (need === 'stats') {
        this.loadStatsData(function () {
          self.modal_info.title = "Статистика по объектам, датчикам, базе данных";
          self.modalInfoClass.hide = false;
          self.modal_info.stats = true;
          self.modal_info.auth = false;
          self.modal_info.panel = false;
          self.modal_info.filter = false;
          TRIGGERS.panel = true;
          document.body.style.overflow = "hidden";
        });
      }

      if (need === 'auth') {
        Bus.$emit('runCheckAuth');
        this.modal_info.title = "Авторизация";
        this.modalInfoClass.hide = false;
        this.modal_info.stats = false;
        this.modal_info.auth = true;
        this.modal_info.panel = false;
        this.modal_info.filter = false;
      }

      if (need === 'panel') {
        this.modal_info.title = "Панель";
        this.modalInfoClass.hide = false;
        this.modal_info.stats = false;
        this.modal_info.auth = false;
        this.modal_info.panel = true;
        this.modal_info.filter = false;
      }

      if (need === 'filter') {
        this.modal_info.title = "Фильтры";
        this.modalInfoClass.hide = false;
        this.modal_info.stats = false;
        this.modal_info.auth = false;
        this.modal_info.panel = false;
        this.modal_info.filter = true;
      }

      TRIGGERS.panel = true;
      document.body.style.overflow = 'hidden';
    },
    modal_info_close: function modal_info_close() {
      this.modalInfoClass.hide = true;
      this.modal_info.title = "";
      this.modal_info.stats = false;
      this.modal_info.auth = false;
      this.modal_info.panel = false;
      this.modal_info.filter = false;
      TRIGGERS.panel = null;
      document.body.style.overflow = '';
    },
    editPoint: function editPoint() {},
    send_logout: function send_logout() {
      Bus.$emit('sendLogoutRun');
      Bus.$emit('modal_info_show_auth_run');
    },
    showModal: function showModal() {
      TRIGGERS.panel = true;
      document.body.style.overflow = 'hidden';
      this.modalClass.hide = false;
    },
    closeModal: function closeModal() {
      TRIGGERS.panel = null;
      document.body.style.overflow = '';
      this.modalClass.hide = true;
    },
    toggle_show_dogovor_on_map: function toggle_show_dogovor_on_map() {
      if (this.filters.dogovors.toggle) {
        this.filters.dogovors.toggle = false;
        this.buttons.state_icons["dogovors"]["fa-square"] = false;
        this.buttons.state_icons["dogovors"]["fa-square-o"] = true;
        filterApp.add("and", "dogovor", "dogovor", "!==", "\"0\"");
        filterApp.make();
      } else {
        this.filters.dogovors.toggle = true;
        this.buttons.state_icons["dogovors"]["fa-square"] = true;
        this.buttons.state_icons["dogovors"]["fa-square-o"] = false;

        if (!this.filters.dogovors.alreadyInGroup) {
          this.filters.dogovors.alreadyInGroup = true;
          filterApp.remove("and", 'dogovor');
          filterApp.make();
          this.loadDogovorsData(function (data) {
            ObjectManagerGroup.add(data);
          });
        } else {
          filterApp.remove("and", "dogovor");
          filterApp.make();
        }
      }
    },
    toggle_show_companies_on_map: function toggle_show_companies_on_map() {
      if (this.filters.companies.toggle) {
        this.filters.companies.toggle = false;
        filterApp.add("and", "iscompany", "iscompany", "!==", true);
        filterApp.make();
      } else {
        this.filters.companies.toggle = true;

        if (!this.filters.companies.alreadyInGroup) {
          this.filters.companies.alreadyInGroup = true;
          filterApp.add("and", "iscompany", "iscompany", "==", true);
          filterApp.make();
          this.loadCompaniesData(function (data) {
            ObjectManagerGroup.add(data);
          });
        } else {
          filterApp.reset();
          filterApp.add("and", "iscompany", "iscompany", "==", true);
          filterApp.make();
        }
      }
    },
    find_number_in_list: function find_number_in_list(event) {
      var i, item, items, len, regexp, target;
      event.preventDefault();
      event.stopPropagation();
      target = event.target;
      regexp = new RegExp(target.value, 'i');
      items = [].slice.call(document.querySelectorAll('[data-area="numbers"] li a'));

      for (i = 0, len = items.length; i < len; i++) {
        item = items[i];

        (function (item) {
          if (!regexp.test(item.dataset.number)) {
            if (item.dataset.area !== 'search') {
              item.classList.add('hide');
            }
          } else {
            item.classList.remove('hide');
          }
        })(item);
      }
    },
    filter_by_name: function filter_by_name(event) {
      var fn, self, target;
      self = this;
      target = event.target;

      if (this.timers.search_by_name) {
        clearTimeout(this.timers.search_by_name);
        this.timers.search_by_name = null;
      }

      fn = function fn() {
        var list;
        postJsonWithData("/search/by/name", {
          name: target.value
        }, function (res) {
          self.object_names = res.data;
        });
        list = document.querySelector("[data-target=\"search_with_name_object_list\"]");

        if (target.value.length > 0) {
          list.style.display = "block";
        } else {
          list.style.display = "none";
        }
      };

      this.timers.search_by_name = setTimeout(function () {
        fn();
      }, 500);
    },
    change_filter: function change_filter(type, id, event, need_send) {
      var icon, query, target;

      if (event) {
        event.preventDefault();
        event.stopPropagation();
        target = event.target;

        while (target.hasAttribute('nc') === true) {
          target = target.parentNode;
        }

        icon = target.querySelector('i');
      } else {
        query = "[data-type=\"".concat(type, "\"][data-id=\"").concat(id, "\"] > i");
        icon = document.querySelector(query);
      }

      need_send = need_send != null ? need_send : true;

      if (this["".concat(type, "_changed")][id] != null) {
        icon.classList.remove('fa-check-square-o');
        icon.classList.add('fa-square-o');
        delete this["".concat(type, "_changed")][id];

        if (need_send) {
          this.sync_buttons_send(type, id, false);
        }
      } else {
        icon.classList.add('fa-check-square-o');
        icon.classList.remove('fa-square-o');
        this["".concat(type, "_changed")][id] = this["".concat(type)][id];

        if (need_send) {
          this.sync_buttons_send(type, id, true);
        }
      }

      if (need_send) {
        this.set_filters();
      }
    },
    set_filters: function set_filters() {
      filterApp.make();
    },
    filters_reset: function filters_reset() {
      var fn, i, len, names, ref, self;
      self = this;

      fn = function fn(names) {
        var _from, _to, i, id, ids, len;

        _from = names[0];
        _to = names[1];
        ids = Object.keys(self[_from]);

        for (i = 0, len = ids.length; i < len; i++) {
          id = ids[i];

          (function (id) {
            var icon, query;
            delete self[_from][id];
            query = "[data-type=\"".concat(_to, "\"][data-id=\"").concat(id, "\"] > i");
            icon = document.querySelector(query);
            icon.classList.remove('fa-check-square-o');
            icon.classList.add('fa-square-o');
          })(id);
        }
      };

      ref = [['class_fps_changed', 'class_fps'], ['services_changed', 'services'], ['types_changed', 'types'], ['departments_changed', 'departments'], ['companies_changed', 'companies'], ['regions_changed', 'regions']];

      for (i = 0, len = ref.length; i < len; i++) {
        names = ref[i];

        (function (names) {
          fn(names);
        })(names);
      }

      filterApp.reset();
      filterApp.make();
    },
    filter_by_number: function filter_by_number(event) {
      var icon, index, target, uid;
      event.preventDefault();
      event.stopPropagation();
      target = event.target;

      while (target.hasAttribute('nc') === true) {
        target = target.parentNode;
      }

      uid = "".concat(target.dataset.number, "_").concat(target.dataset.region_id);
      icon = target.querySelector("i");

      if (indexOf.call(this.numbers_in_filters, uid) < 0) {
        filterApp.add("orand", "number_".concat(uid), "number", "==", "\"".concat(target.dataset.number, "\""));
        filterApp.add("orand", "number_".concat(uid), "region_id", "==", "\"".concat(target.dataset.region_id, "\""));
        filterApp.make();
        this.numbers_in_filters.push(uid);
        icon.classList.add('fa-check-square-o');
        icon.classList.remove('fa-square-o');
      } else {
        filterApp.remove("orand", "number_".concat(uid));
        filterApp.make();
        index = this.numbers_in_filters.indexOf(target.dataset.region_id);
        this.numbers_in_filters.splice(index, 1);
        icon.classList.remove('fa-check-square-o');
        icon.classList.add('fa-square-o');
      }
    },
    search_with_name_object_list__toggle: function search_with_name_object_list__toggle() {
      var list;
      list = document.querySelector("[data-target=\"search_with_name_object_list\"]");

      if (list.style.display === "none") {
        list.style.display = "block";
      } else {
        list.style.display = "none";
      }
    },
    filter_by_object_name_clear: function filter_by_object_name_clear() {
      var i, j, l, len, len1, ref, ref1, self, uid;
      self = this;
      ref = [].slice.call(document.querySelectorAll("[data-target=\"search_with_name_object_list\"] li"));

      for (i = 0, len = ref.length; i < len; i++) {
        l = ref[i];

        (function (l) {
          var icon;
          icon = l.querySelector("i");
          icon.classList.remove('fa-check-square-o');
          icon.classList.add('fa-square-o');
        })(l);
      }

      ref1 = this.object_names_in_filters;

      for (j = 0, len1 = ref1.length; j < len1; j++) {
        uid = ref1[j];

        (function (uid) {
          filterApp.remove("orand", "byname_".concat(uid));
        })(uid);
      }

      this.object_names_in_filters = [];
      filterApp.make();
    },
    filter_by_object_name: function filter_by_object_name(object_name, event) {
      var icon, index, target, uid;
      event.preventDefault();
      event.stopPropagation();
      target = event.target;

      while (target.hasAttribute('nc') === true) {
        target = target.parentNode;
      }

      icon = target.querySelector("i");
      uid = "".concat(object_name.number, "_").concat(object_name.region_id);

      if (indexOf.call(this.object_names_in_filters, uid) >= 0) {
        icon.classList.remove('fa-check-square-o');
        icon.classList.add('fa-square-o');
        index = this.object_names_in_filters.indexOf(uid);
        this.object_names_in_filters.splice(index, 1);
        filterApp.remove("orand", "byname_".concat(uid));
      } else {
        icon.classList.add('fa-check-square-o');
        icon.classList.remove('fa-square-o');
        this.object_names_in_filters.push(uid);
        filterApp.add("orand", "byname_".concat(uid), "number", "==", "\"".concat(object_name.number, "\""));
        filterApp.add("orand", "byname_".concat(uid), "region_id", "==", "\"".concat(object_name.region_id, "\""));
      }

      filterApp.make();
    },
    find_region_in_list: function find_region_in_list(event) {
      var i, item, items, j, len, len1, regexp, target;
      event.preventDefault();
      event.stopPropagation();
      target = event.target;
      regexp = new RegExp(target.value, 'i');
      items = [].slice.call(document.querySelectorAll('[data-item="region"]'));

      if (target.value !== '') {
        for (i = 0, len = items.length; i < len; i++) {
          item = items[i];

          (function (item) {
            if (regexp.test(item.dataset.name)) {
              item.classList.remove('hide');
            } else {
              item.classList.add('hide');
            }
          })(item);
        }
      } else {
        for (j = 0, len1 = items.length; j < len1; j++) {
          item = items[j];

          (function (item) {
            item.classList.remove('hide');
          })(item);
        }
      }
    },
    filter_points_state: function filter_points_state(state_id) {
      if (this.filters.states[state_id]) {
        this.filters.states[state_id] = false;
        filterApp.add("and", "state_id_".concat(state_id), "state_id", "!==", "\"".concat(state_id, "\""));

        if (this.buttons.state_icons["st".concat(state_id)].hasOwnProperty("fa-circle")) {
          this.buttons.state_icons["st".concat(state_id)]["fa-circle"] = false;
          this.buttons.state_icons["st".concat(state_id)]["fa-circle-o"] = true;
        }
      } else {
        this.filters.states[state_id] = true;
        filterApp.remove("and", "state_id_".concat(state_id));

        if (this.buttons.state_icons["st".concat(state_id)].hasOwnProperty("fa-circle")) {
          this.buttons.state_icons["st".concat(state_id)]["fa-circle"] = true;
          this.buttons.state_icons["st".concat(state_id)]["fa-circle-o"] = false;
        }
      }

      filterApp.make();
    },
    sync_buttons_send: function sync_buttons_send(type, id, status) {
      Bus.$emit('sync_buttons_side_1_run', type, id, status);
    },
    sync_buttons_get: function sync_buttons_get(type, id, status) {
      this.change_filter(type, id, null, false);
    },
    loadObjectData: function loadObjectData(cb) {
      var cacheData, data;
      Preloader.label('Загружаем данные с сервера');

      cacheData = function cacheData(data, fromCache) {
        var Data;

        if (cb) {
          cb(data);
        }

        Data = window.Data = data;

        if (!fromCache) {
          localStorage.setItem("rows", JSON.stringify(data));
          return localStorage.setItem("cached", true);
        }
      };

      if (localStorage.hasOwnProperty("_cached")) {
        data = JSON.parse(localStorage.getItem("rows"));
        cacheData(data, true);
      } else {
        getJsonData("/data", function (res) {
          cacheData(res.data.rows);
        });
      }
    },
    loadStatsData: function loadStatsData(cb) {
      var self;
      self = this;
      getJsonData("/stats", function (res) {
        self.stats = res.data;

        if (cb) {
          cb();
        }
      });
    },
    loadCompaniesData: function loadCompaniesData(cb) {
      var cacheData, data;

      cacheData = function cacheData(data, fromCache) {
        var Data;

        if (cb) {
          cb(data);
        }

        Data = window.Data = data;

        if (!fromCache) {
          localStorage.setItem("companies", JSON.stringify(data));
          return localStorage.setItem("companies_cached", true);
        }
      };

      if (localStorage.hasOwnProperty("_companies_cached")) {
        data = JSON.parse(localStorage.getItem("companies"));

        if (cb) {
          cb(data);
        }

        cacheData(data, true);
      } else {
        getJsonData("/companies", function (res) {
          cacheData(res.data.rows);
        });
      }
    },
    loadDogovorsData: function loadDogovorsData(cb) {
      var cacheData, data;

      cacheData = function cacheData(data, fromCache) {
        var Data;

        if (cb) {
          cb(data);
        }

        Data = window.Data = data;

        if (!fromCache) {
          localStorage.setItem("dogovors", JSON.stringify(data));
          return localStorage.setItem("dogovors_cached", true);
        }
      };

      if (localStorage.hasOwnProperty("_dogovors_cached")) {
        data = JSON.parse(localStorage.getItem("dogovors"));

        if (cb) {
          cb(data);
        }

        cacheData(data, true);
      } else {
        getJsonData("/dogovors", function (res) {
          cacheData(res.data.rows);
        });
      }
    },
    initTools: function initTools() {
      var self;
      self = this;
      getJsonData("/filters", function (res) {
        self.regions = res.data.regions;
        self.numbers = res.data.numbers;
        self.companies = res.data.companies;
        self.class_fps = res.data.class_fps;
        self.departments = res.data.departments;
        self.types = res.data.types;
        self.services = res.data.services;
      });
    },
    initMap: function initMap(data) {
      this.drawMap(data);
    },
    drawMap: function drawMap(data) {
      var PMap, YMap;

      if (typeof ymaps === 'undefined') {
        return;
      }

      YMap = window.YMap = new ymaps.Map("map", {
        center: [48.03151328246074, 41.33003048828119],
        zoom: 7,
        type: 'yandex#map',
        controls: ['zoomControl']
      }, {
        autoFitToViewport: true,
        restrictMapArea: [[42, 28], [52, 56]]
      });
      YMap.behaviors.disable('scrollZoom');
      ymaps.borders.load('RU', {
        lang: 'ru',
        quality: 3
      }).then(function (result) {
        var background, c, i, j, len, len1, ref, ref1, region;
        region = null;
        ref = result.features;

        for (i = 0, len = ref.length; i < len; i++) {
          c = ref[i];

          (function (c) {
            if (c.properties.iso3166 === 'RU-ROS') {
              region = c;
            }
          })(c);
        }

        background = new ymaps.Polygon([[[82, -170], [82, 20], [40, 20], [40, -170], [82, -170]]], {}, {
          fillColor: 'rgba(0, 0, 0, 0.5)',
          strokeWidth: 0
        });
        ref1 = region.geometry.coordinates;

        for (j = 0, len1 = ref1.length; j < len1; j++) {
          c = ref1[j];

          (function (c) {
            background.geometry.insert(1, c);
          })(c);
        }

        YMap.geoObjects.add(background);
      });
      this.drawPlacemarks(data);
      PMap = window.PMap = new ymaps.Map("map_point", {
        center: [48.03151328246074, 41.33003048828119],
        zoom: 7,
        type: 'yandex#map',
        controls: ['zoomControl']
      }, {
        autoFitToViewport: true,
        restrictMapArea: [[42, 28], [52, 56]]
      });
      PMap.behaviors.disable('scrollZoom');
      ymaps.borders.load('RU', {
        lang: 'ru',
        quality: 3
      }).then(function (result) {
        var background, c, i, j, len, len1, ref, ref1, region;
        region = null;
        ref = result.features;

        for (i = 0, len = ref.length; i < len; i++) {
          c = ref[i];

          (function (c) {
            if (c.properties.iso3166 === 'RU-ROS') {
              region = c;
            }
          })(c);
        }

        background = new ymaps.Polygon([[[82, -170], [82, 20], [40, 20], [40, -170], [82, -170]]], {}, {
          fillColor: 'rgba(0, 0, 0, 0.5)',
          strokeWidth: 0
        });
        ref1 = region.geometry.coordinates;

        for (j = 0, len1 = ref1.length; j < len1; j++) {
          c = ref1[j];

          (function (c) {
            background.geometry.insert(1, c);
          })(c);
        }

        PMap.geoObjects.add(background);
      });
      PMap.events.add('click', this.point_changed_event);
    },
    point_changed_event: function point_changed_event(event) {
      var coordinate, point_temp;
      console.log("point_changed_event:", event);
      coordinate = event.get('coords');

      if (window.point_temp) {
        PMap.geoObjects.remove(window.point_temp);
      }

      point_temp = window.point_temp = new ymaps.Placemark(coordinate);
      PMap.geoObjects.add(point_temp);
      Bus.$emit("changePointRun", event.get('coords'));
    },
    getPointData: function getPointData(id, cb) {
      getJsonData("/getDataById/".concat(id), function (res) {
        if (cb) {
          cb(res);
        }
      });
    },
    placemarkEvent: function placemarkEvent(event) {
      var id, point, self;
      id = event.get("objectId");
      point = ObjectManagerGroup.objects.getById(id);
      self = this;

      if (point.properties.hasOwnProperty('iscompany')) {
        if (point.properties.iscompany === true) {
          this.closeModal();
          return;
        }
      }

      if (this.row) {
        if (this.row.id === point.id) {
          self.showCard(this.row);
          return;
        }
      }

      this.getPointData(point.id, function (json) {
        self.showCard(json.data);
      });
    },
    showCard: function showCard(row) {
      this.row = row;
      this.showModal();
    },
    drawPlacemarks: function drawPlacemarks(data) {
      var ObjectManagerGroup;
      ObjectManagerGroup = window.ObjectManagerGroup = new ymaps.ObjectManager({
        clusterize: false,
        gridSize: 0,
        clusterDisableClickZoom: true,
        clusterIconLayout: "default#pieChart"
      });
      ObjectManagerGroup.events.add('click', this.placemarkEvent);
      ObjectManagerGroup.add(data.state_1);
      ObjectManagerGroup.add(data.state_2);
      ObjectManagerGroup.add(data.state_3);
      this.ch_counter_objects_state = data.ch_counter_objects_state;
      YMap.geoObjects.add(ObjectManagerGroup);
    },
    updatePlacemarks: function updatePlacemarks(data) {
      var i, index, len, ref, row;
      ref = data.features;

      for (index = i = 0, len = ref.length; i < len; index = ++i) {
        row = ref[index];

        (function (row, index) {
          ObjectManagerGroup.remove([row.id]);

          if (index + 1 === data.features.length) {
            setTimeout(function () {
              ObjectManagerGroup.add(data);
              alertify.message("\u043E\u0431\u043D\u043E\u0432\u043B\u0435\u043D\u043E ".concat(data.features.length, " \u043E\u0431\u044A\u0435\u043A\u0442\u043E\u0432 \u043D\u0430 \u043A\u0430\u0440\u0442\u0435"));
            }, 2000);
          }
        })(row, index);
      }
    },
    runSyncData: function runSyncData() {
      var fn, self;
      self = this;

      fn = function fn(ch_counter_objects_state) {
        if (ch_counter_objects_state) {
          getJsonData("/data/objects_state/".concat(ch_counter_objects_state), function (res) {
            if (res.status) {
              self.updatePlacemarks(res.data.rows);
              self.ch_counter_objects_state = res.data.ch_counter_objects_state;
            }

            self.runSyncData();
          });
        } else {
          self.runSyncData();
        }
      };

      this.timers.syncData = setTimeout(function () {
        fn(self.ch_counter_objects_state);
      }, 32000);
    }
  },
  created: function created() {
    var self;
    Preloader.label('подготавливаем приложение');
    self = this;
    this.initTools();
    this.loadObjectData(function (data) {
      var map_dom;
      Preloader.label('Инициализируем yandex api');
      map_dom = document.getElementById('map');

      if (map_dom) {
        if (map_dom.dataset.yanmapapi) {
          ymaps.ready(function () {
            self.initMap(data);
          });
        }
      }
    });
    this.runSyncData();
    Bus.$on('sendLoginStatus', function (user) {
      self.user = user;
    });
    Bus.$on('runShowPanel', function () {
      self.modal_info.title = "Панель";
      self.modalInfoClass.hide = false;
      self.modal_info.stats = false;
      self.modal_info.auth = false;
      self.modal_info.panel = true;
      self.modal_info.filter = false;
      TRIGGERS.panel = true;
      document.body.style.overflow = "hidden";
      document.querySelector("[data-button=\"info\"]").click();
    });
    Bus.$on('toggle_show_companies_on_map_run', function () {
      self.toggle_show_companies_on_map();
    });
    Bus.$on('modal_info_show_auth_run', function () {
      Bus.$emit("runCheckAuth");
      self.modal_info.title = "Авторизация";
      self.modalInfoClass.hide = false;
      self.modal_info.stats = false;
      self.modal_info.auth = true;
      self.modal_info.panel = false;
      self.modal_info.filter = false;
      TRIGGERS.panel = true;
      document.body.style.overflow = "hidden";
    });
    Bus.$on('modal_info_close_run', function () {
      self.modal_info_close();
      TRIGGERS.panel = null;
      document.body.style.overflow = "";
    });
    Bus.$on('sync_buttons_side_2_run', this.sync_buttons_get);
    Bus.$on('filters_reset_run', this.filters_reset);
  }
};
auth_data_app = {
  data: function data() {
    var _data;

    _data = {
      authenticated: false,
      registered: false,
      login: '',
      user: {},
      login_auth: '',
      password_auth: '',
      login_reg: '',
      password_reg1: '',
      password_reg2: '',
      auth_errors: [],
      reg_errors: [],
      auth_form: {
        hide: true,
        fadeOut: false,
        fadeIn: false
      },
      reg_form: {
        hide: true,
        fadeOut: false,
        fadeIn: false
      },
      logout_form: {
        hide: true,
        fadeOut: false,
        fadeIn: false
      }
    };
    return _data;
  },
  template: null,
  methods: {
    reset_auth_form: function reset_auth_form() {
      ({
        login_auth: '',
        password_auth: '',
        auth_errors: []
      });
    },
    reset_reg_form: function reset_reg_form() {
      ({
        login_reg: '',
        password_reg1: '',
        password_reg2: '',
        reg_errors: []
      });
    },
    send_auth: function send_auth() {
      var self;
      self = this;
      postJsonWithData("/auth/login", {
        login: this.login_auth,
        password: this.password_auth
      }, function (res) {
        self.auth_errors = res.data.errors;
        self.authenticated = res.status;

        if (res.status) {
          self.login = res.data.user.login;
          self.show_logoutform();
          self.send_login_status(res.data.user);
          self.user = res.data.user;
        } else {
          self.send_login_status({});
          self.user = {};
        }
      });
    },
    send_reg: function send_reg() {
      var self;
      self = this;
      postJsonWithData("/auth/reg", {
        login: this.login_reg,
        password1: this.password_reg1,
        password2: this.password_reg2
      }, function (res) {
        self.reg_errors = res.data.errors;
        self.registered = res.status;

        if (res.status) {
          self.auth_errors = ['войдите под своим логином'];
          self.show_authform();
        }
      });
    },
    send_logout: function send_logout() {
      var self;
      self = this;
      postJsonData("/auth/logout", function (res) {
        if (res.status) {
          self.logout_form.fadeIn = false;
          self.logout_form.fadeOut = true;
          self.send_login_status({});
          self.user = {};
          setTimeout(function () {
            self.login = '';
            self.auth_form.fadeOut = false;
            self.auth_form.fadeIn = true;
            return self.auth_form.hide = false;
          }, 1000);
        }
      });
    },
    show_regform: function show_regform() {
      var self;
      self = this;
      this.reset_auth_form();
      this.auth_form.fadeIn = false;
      this.auth_form.fadeOut = true;
      setTimeout(function () {
        self.auth_form.hide = true;
        self.reg_form.fadeIn = true;
        self.reg_form.fadeOut = false;
        return self.reg_form.hide = false;
      }, 1000);
    },
    show_authform: function show_authform() {
      var self;
      self = this;
      this.reset_reg_form();
      this.reg_form.fadeIn = false;
      this.reg_form.fadeOut = true;
      this.logout_form.hide = true;
      setTimeout(function () {
        self.reg_form.hide = true;
        self.auth_form.fadeIn = true;
        self.auth_form.fadeOut = false;
        return self.auth_form.hide = false;
      }, 1000);
    },
    show_logoutform: function show_logoutform() {
      var self;
      self = this;

      if (!this.auth_form.hide) {
        this.auth_form.fadeIn = false;
        this.auth_form.fadeOut = true;
        setTimeout(function () {
          self.auth_form.hide = true;
          self.logout_form.fadeIn = true;
          self.logout_form.fadeOut = false;
          return self.logout_form.hide = false;
        }, 1000);
      } else {
        this.logout_form.fadeIn = true;
        this.logout_form.fadeOut = false;
        this.logout_form.hide = false;
      }
    },
    show_panel: function show_panel() {
      Bus.$emit('runShowPanel');
    },
    send_login_status: function send_login_status(login) {
      Bus.$emit('sendLoginStatus', login);
    },
    checkAuth: function checkAuth() {
      var self;
      self = this;
      postJsonData("/auth/check", function (res) {
        if (res.status) {
          self.show_logoutform();
          self.login = res.data.login;
          self.user = res.data;
          self.send_login_status(res.data);
        } else {
          self.show_authform();
          self.user = {};
          self.send_login_status({});
        }
      });
    }
  },
  created: function created() {
    var self;
    self = this;
    this.checkAuth();
    Bus.$on("runCheckAuth", function () {
      self.checkAuth();
    });
    Bus.$on("sendLogoutRun", function () {
      self.send_logout();
    });
  }
};
panel_data_app = {
  data: function data() {
    var _data;

    _data = window._pdata = {
      users_list: [],
      users_helpers: {},
      objects_list: [],
      objects_paginations: {},
      objects_list_find: [],
      objects_paginations_find: {},
      objects_helpers: {},
      number_find: null,
      region_id_find: null,
      name_find: null,
      address_find: null,
      company_id_find: null,
      companies_list: [],
      pages_list: [],
      class_fps_lists: {},
      departments_lists: {},
      services_lists: {},
      types_lists: {},
      user: {},
      form: {
        edit: {
          page: {
            class: {
              hide: true
            },
            errors: [],
            messages: [],
            model: {
              id: null,
              name: null,
              title: null,
              content: null,
              views: null,
              enabled: null
            }
          },
          user: {
            class: {
              hide: true
            },
            errors: [],
            messages: [],
            model: {
              id: null,
              login: null,
              isenabled: null,
              role_id: null,
              role: null,
              fio: null,
              email: null,
              phone: null
            }
          },
          list: {
            class: {
              hide: true
            },
            errors: [],
            messages: [],
            model: {
              id: null,
              value: null
            }
          },
          object: {
            class: {
              hide: true
            },
            errors: [],
            messages: [],
            model: {
              id: null,
              name: null
            }
          },
          company: {
            class: {
              hide: true
            },
            errors: [],
            messages: [],
            model: {
              id: null,
              title: null
            }
          }
        }
      }
    };
    return _data;
  },
  template: null,
  computed: {
    page_content_markdown: function page_content_markdown() {
      var html;

      if (this.form.edit.page.model.content) {
        html = marked(this.form.edit.page.model.content);
      } else {
        html = "";
      }

      return html;
    }
  },
  methods: {
    show_panel_part: function show_panel_part(part) {
      var self;
      self = this;

      switch (part) {
        case 'users':
        case 'pages':
        case 'companies':
          this.get_data_and_show(part);
          break;

        case 'lists':
          this.get_data_and_show_from_lists();
          break;

        case 'objects':
          this.get_data_and_show_from_objects();
      }
    },
    get_data_and_show: function get_data_and_show(_from) {
      var self;
      self = this;
      postJsonWithData("/api", {
        action: "getdata",
        from: _from
      }, function (res) {
        if (res.status) {
          self["".concat(_from, "_list")] = res.data;
        } else {
          self["".concat(_from, "_list")] = [];
        }
      });
    },
    get_data_and_show_from_lists: function get_data_and_show_from_lists() {
      var self;
      self = this;
      postJsonWithData("/api", {
        action: "getdata",
        from: 'lists'
      }, function (res) {
        if (res.status) {
          self.class_fps_lists = res.data.class_fps;
          self.departments_lists = res.data.departments;
          self.services_lists = res.data.services;
          self.types_lists = res.data.types;
        } else {
          self.class_fps_lists = [];
          self.departments_lists = [];
          self.services_lists = [];
          self.types_lists = [];
        }
      });
    },
    get_data_and_show_from_objects: function get_data_and_show_from_objects(page) {
      var self;
      page = page != null ? page : 1;
      self = this;
      postJsonWithData("/api", {
        action: "getdata",
        from: "objects",
        page: page
      }, function (res) {
        if (res.status) {
          self.objects_list = res.data.rows;
          self.objects_paginations = res.data.paginations;
          self.objects_helpers.regions = res.data.helpers.regions;
          self.objects_helpers.companies = res.data.helpers.companies;
        } else {
          self.objects_list = [];
          self.objects_paginations = {};
          self.objects_helpers = {};
        }
      });
    },
    find_data_and_show_from_objects: function find_data_and_show_from_objects(page) {
      var params, self;
      self = this;
      page = page != null ? page : 1;
      params = {
        action: "finddata",
        from: "objects",
        page: page,
        number: this.number_find,
        region_id: this.region_id_find,
        name: this.name_find,
        address: this.address_find,
        company_id: this.company_id_find
      };
      postJsonWithData("/api", params, function (res) {
        if (res.status) {
          self.objects_list_find = res.data.rows;
          self.objects_paginations_find = res.data.paginations;
          self.objects_helpers.regions = res.data.helpers.regions;
          self.objects_helpers.companies = res.data.helpers.companies;
        } else {
          self.objects_list_find = [];
          self.objects_paginations_find = {};
          self.objects_helpers = {};
        }
      });
    },
    show_edit_form_for_user: function show_edit_form_for_user(id) {
      var self;
      self = this;
      postJsonWithData("/api", {
        action: "getdata",
        from: "user",
        id: id
      }, function (res) {
        if (res.status) {
          self.form.edit.user.model = res.data;
          self.users_helpers = res.data.helpers;
          delete self.form.edit.user.model.helpers;
          self.form.edit.user.class.hide = false;
        }
      });
    },
    close_edit_form_for_user: function close_edit_form_for_user() {
      this.reset_form_for_user();
      this.form.edit.user.class.hide = true;
    },
    save_user: function save_user() {
      var self;
      self = this;
      postJsonWithData("/api", {
        action: "savedata",
        from: "user",
        model: this.form.edit.user.model
      }, function (res) {
        if (res.status) {
          self.form.edit.user.model = res.data;
          self.sync_list_models(res.data, self.users_list);

          if (self.user.id === res.data.id) {
            Bus.$emit('sendLoginStatus', {
              id: res.data.id,
              login: res.data.login,
              role_id: res.data.role_id,
              role: res.data.role
            });
          }
        }

        self.form.edit.user.errors = res.errors;
        self.form.edit.user.messages = res.messages;
        setTimeout(function () {
          self.form.edit.user.messages = [];
        }, 3000);
      });
    },
    delete_for_user: function delete_for_user(id) {
      var self;
      self = this;
      postJsonWithData("/api", {
        action: "delete",
        from: "user",
        id: id
      }, function (res) {
        if (res.status) {
          self.sync_for_delete(id, self.users_list);
          self.reset_form_for_page();
        }
      });
    },
    toggle_for_user: function toggle_for_user(id) {
      var self;
      self = this;
      postJsonWithData("/api", {
        action: "toggle",
        from: "user",
        field: "isenabled",
        id: id
      }, function (res) {
        if (res.status) {
          self.sync_toggle_field(id, "isenabled", res.data, self.users_list);
        }
      });
    },
    change_company_for_user: function change_company_for_user(id, name) {
      var self;
      self = this;
      this.form.edit.user.model.company_id = id;
      this.form.edit.user.model.company = name;
    },
    create_page_and_show_form: function create_page_and_show_form() {
      var self;
      self = this;
      postJsonWithData("/api", {
        action: "create",
        from: "page"
      }, function (res) {
        if (res.status) {
          self.form.edit.page.model = res.data;
          self.pages_list.push(res.data);
          self.form.edit.page.class.hide = false;
        }
      });
    },
    show_edit_form_for_page: function show_edit_form_for_page(id) {
      var self;
      self = this;
      postJsonWithData("/api", {
        action: "getdata",
        from: "page",
        id: id
      }, function (res) {
        if (res.status) {
          self.form.edit.page.model = res.data;
          self.form.edit.page.class.hide = false;
        }
      });
    },
    close_edit_form_for_page: function close_edit_form_for_page() {
      this.reset_form_for_page();
      this.form.edit.page.class.hide = true;
    },
    delete_for_page: function delete_for_page(id) {
      var self;
      self = this;
      postJsonWithData("/api", {
        action: "delete",
        from: "page",
        id: id
      }, function (res) {
        if (res.status) {
          self.sync_for_delete(id, self.pages_list);
          self.reset_form_for_page();
        }
      });
    },
    toggle_for_page: function toggle_for_page(id) {
      var self;
      self = this;
      postJsonWithData("/api", {
        action: "toggle",
        from: "page",
        field: "enabled",
        id: id
      }, function (res) {
        if (res.status) {
          self.sync_toggle_field(id, "enabled", res.data, self.pages_list);
        }
      });
    },
    save_page: function save_page() {
      var self;
      self = this;
      postJsonWithData("/api", {
        action: "savedata",
        from: "page",
        model: this.form.edit.page.model
      }, function (res) {
        if (res.status) {
          self.form.edit.page.model = res.data;
          self.sync_list_models(res.data, self.pages_list);
        }

        self.form.edit.page.errors = res.errors;
        self.form.edit.page.messages = res.messages;
        setTimeout(function () {
          self.form.edit.page.messages = [];
        }, 3000);
      });
    },
    show_change_point_map: function show_change_point_map() {
      var p, pb;
      console.log("show_change_point_map");

      if (PMap) {
        p = document.getElementById("map_point");

        if (p) {
          p.classList.add("to_top");
        }

        pb = document.getElementById("map_point_btn");

        if (pb) {
          pb.classList.add("to_top");
        }
      }
    },
    hide_change_point_map: function hide_change_point_map() {
      var p, pb;

      if (PMap) {
        p = document.getElementById("map_point");

        if (p) {
          p.classList.remove("to_top");
        }

        pb = document.getElementById("map_point_btn");

        if (pb) {
          pb.classList.remove("to_top");
        }
      }
    },
    change_point: function change_point(coordinate) {
      console.log("CP:", coordinate);
      this.form.edit.object.model.lat = coordinate[0];
      this.form.edit.object.model.lng = coordinate[1];
    },
    change_relation_object_company: function change_relation_object_company(id) {
      console.log("change_relation_object_company:", id);
    },
    show_edit_form_for_object: function show_edit_form_for_object(id) {
      var self;
      self = this;
      postJsonWithData("/api", {
        action: "getdata",
        from: "object",
        id: id
      }, function (res) {
        if (res.status) {
          self.form.edit.object.model = res.data;
          self.form.edit.object.class.hide = false;
        }
      });
    },
    close_edit_form_for_object: function close_edit_form_for_object() {
      this.reset_form_for_object();
      this.form.edit.object.class.hide = true;
    },
    save_object: function save_object() {
      var self;
      self = this;
      postJsonWithData("/api", {
        action: "savedata",
        from: "object",
        model: this.form.edit.object.model
      }, function (res) {
        if (res.status) {
          self.form.edit.object.model = res.data;
          self.sync_list_models(res.data, self.objects_list);
        }

        self.form.edit.object.errors = res.errors;
        self.form.edit.object.messages = res.messages;
        setTimeout(function () {
          self.form.edit.object.messages = [];
        }, 3000);
      });
    },
    delete_for_object: function delete_for_object(id) {
      console.log("delete_for_object:", id);
    },
    reset_form_for_page: function reset_form_for_page() {
      this.form.edit.page.model = {
        id: null,
        name: null,
        title: null,
        content: null,
        views: null,
        enabled: null
      };
    },
    reset_form_for_user: function reset_form_for_user() {
      this.form.edit.page.model = {
        id: null,
        login: null,
        isenabled: null,
        role_id: null,
        role: null,
        fio: null,
        email: null,
        phone: null
      };
    },
    reset_form_for_object: function reset_form_for_object() {
      this.form.edit.object.model = {
        id: null,
        name: null
      };
    },
    reset_form_for_company: function reset_form_for_company() {
      this.form.edit.company.model = {
        id: null
      };
    },
    sync_list_models: function sync_list_models(fresh_model, models_list) {
      var i, index, len, model, self;
      self = this;

      for (index = i = 0, len = models_list.length; i < len; index = ++i) {
        model = models_list[index];

        (function (model, index) {
          var key, value;

          if (model.id === fresh_model.id) {
            for (key in fresh_model) {
              value = fresh_model[key];
              models_list[index][key] = fresh_model[key];
            }
          }
        })(model, index);
      }
    },
    sync_toggle_field: function sync_toggle_field(id, field_name, fresh_model, models_list) {
      var i, index, len, model;

      for (index = i = 0, len = models_list.length; i < len; index = ++i) {
        model = models_list[index];

        (function (model, index) {
          if (model.id === id) {
            models_list[index][field_name] = fresh_model[field_name];
          }
        })(model, index);
      }
    },
    sync_for_delete: function sync_for_delete(id, models_list) {
      var _index, i, index, len, model;

      _index = null;

      for (index = i = 0, len = models_list.length; i < len; index = ++i) {
        model = models_list[index];

        (function (model, index) {
          if (model.id === id) {
            _index = index;
          }
        })(model, index);
      }

      models_list.splice(_index, 1);
    },
    show_edit_form_for_list: function show_edit_form_for_list(id) {},
    show_edit_form_for_company: function show_edit_form_for_company(id) {
      var self;
      console.log("show_edit_form_for_company:", id);
      self = this;
      postJsonWithData("/api", {
        action: "getdata",
        from: "company",
        id: id
      }, function (res) {
        if (res.status) {
          self.form.edit.company.model = res.data;
          self.form.edit.company.class.hide = false;
        }
      });
    },
    save_company: function save_company() {
      var self;
      self = this;
      postJsonWithData("/api", {
        action: "savedata",
        from: "company",
        model: this.form.edit.company.model
      }, function (res) {
        if (res.status) {
          self.form.edit.company.model = res.data;
          self.sync_list_models(res.data, self.companies_list);
        }

        self.form.edit.company.errors = res.errors;
        self.form.edit.company.messages = res.messages;
        setTimeout(function () {
          self.form.edit.company.message = [];
        }, 3000);
      });
    },
    delete_for_company: function delete_for_company(id) {
      var self;
      self = this;
      postJsonWithData("/api", {
        action: "delete",
        from: "company",
        id: id
      }, function (res) {
        if (res.status) {
          self.sync_for_delete(id, self.companies_list);
          self.reset_form_for_company();
        }
      });
    },
    create_company_and_show_form: function create_company_and_show_form() {
      var self;
      self = this;
      postJsonWithData("/api", {
        action: "create",
        from: "company"
      }, function (res) {
        console.log("create_company_and_show_form:", res);

        if (res.status) {
          self.form.edit.company.model = res.data;
          self.companies_list.push(res.data);
          self.form.edit.company.class.hide = false;
        }
      });
    },
    close_edit_form_for_company: function close_edit_form_for_company() {
      this.reset_form_for_company();
      this.form.edit.company.class.hide = true;
    }
  },
  created: function created() {
    var self;
    self = this;
    Bus.$on('sendLoginStatus', function (user) {
      self.user = user;
    });
    Bus.$on('changePointRun', function (coordinate) {
      self.change_point(coordinate);
    });
    Bus.$on('pointWasChangedRun', function () {
      self.hide_change_point_map();
    });
  }
};
menu_nav_data_app = {
  data: function data() {
    var _data;

    _data = {
      current_menu: null,
      menu_main_items: []
    };
    return _data;
  },
  template: null,
  methods: {
    deactivate_all_items: function deactivate_all_items() {
      var i, item, len, ref;
      ref = this.menu_main_items;

      for (i = 0, len = ref.length; i < len; i++) {
        item = ref[i];

        (function (item) {
          item.classList.remove('active');
        })(item);
      }
    },
    change_menu_item: function change_menu_item(event) {
      var target;
      target = event.target;

      while (target.hasAttribute('nc') === true) {
        target = target.parentNode;
      }

      if (target.dataset.click === 'toggle_show_companies_on_map') {
        if (target.classList.contains('active')) {
          return;
        }

        Bus.$emit('toggle_show_companies_on_map_run');
        this.deactivate_all_items();
        target.classList.add('active');
      } else if (target.dataset.click === 'toggle_show_monitoring') {
        if (target.classList.contains('active')) {
          return;
        }

        Bus.$emit('toggle_show_companies_on_map_run');
        this.deactivate_all_items();
        target.classList.add('active');
      } else if (target.dataset.click === 'modal_info_show_auth') {
        Bus.$emit('modal_info_show_auth_run');
      } else {
        console.log("E: not found");
      }
    },
    toggle_menu_sidebar: function toggle_menu_sidebar(event) {
      var sidebar_dom;
      sidebar_dom = document.querySelector('[data-area="menu_sidebar"]');

      if (sidebar_dom.classList.contains('menu_sidebar__hidden')) {
        sidebar_dom.classList.remove('menu_sidebar__hidden');
      } else {
        sidebar_dom.classList.add('menu_sidebar__hidden');
      }
    }
  },
  created: function created() {
    var btn, i, len, menu_dom, menu_sidebar_btns, self;
    self = this;
    menu_dom = document.querySelector('[data-area="menu"]');

    if (menu_dom) {
      this.menu_main_items = [].slice.call(menu_dom.querySelectorAll('li a'));
      menu_dom.addEventListener('click', function (event) {
        self.change_menu_item(event);
      });
    }

    menu_sidebar_btns = [].slice.call(document.querySelectorAll('[data-action="toggle menu_sidebar"]'));

    for (i = 0, len = menu_sidebar_btns.length; i < len; i++) {
      btn = menu_sidebar_btns[i];

      (function (btn) {
        btn.addEventListener('click', function (event) {
          self.toggle_menu_sidebar(event);
        });
      })(btn);
    }
  }
};
filter_panel_data_app = {
  data: function data() {
    var _data;

    _data = window._fdata = {
      class_fps: {},
      class_fps_changed: {},
      departments: {},
      departments_changed: {},
      types: {},
      types_changed: {},
      companies: {},
      companies_changed: {},
      services: {},
      services_changed: {},
      regions: {},
      regions_changed: {},
      object_names: [],
      object_names_in_filters: [],
      timers: {},
      buttons: {
        state_icons: {
          st1: {
            "fa-circle": true,
            "fa-circle-o": false
          },
          st2: {
            "fa-circle": true,
            "fa-circle-o": false
          },
          st3: {
            "fa-circle": true,
            "fa-circle-o": false
          },
          dogovors: {
            "fa-square": false,
            "fa-square-o": true
          }
        }
      },
      filters: {
        states: {
          "1": true,
          "2": true,
          "3": true,
          "dogovors": false
        }
      }
    };
    return _data;
  },
  template: null,
  methods: {
    filters_reset: function filters_reset() {
      var fn, i, len, names, ref, self;
      self = this;

      fn = function fn(names) {
        var _from, _to, i, id, ids, len;

        _from = names[0];
        _to = names[1];
        ids = Object.keys(self[_from]);

        for (i = 0, len = ids.length; i < len; i++) {
          id = ids[i];

          (function (id) {
            var value;
            value = self[_from][id];
            self.$set(self[_to], id, value);
            self.$delete(self[_from], id);
          })(id);
        }
      };

      ref = [['regions_changed', 'regions'], ['class_fps_changed', 'class_fps'], ['services_changed', 'services'], ['types_changed', 'types'], ['departments_changed', 'departments'], ['companies_changed', 'companies']];

      for (i = 0, len = ref.length; i < len; i++) {
        names = ref[i];

        (function (names) {
          fn(names);
        })(names);
      }

      this.modal_info_close();
      Bus.$emit('filters_reset_run');
      filterApp.reset();
      filterApp.make();
    },
    set_filters_and_show_map: function set_filters_and_show_map() {
      this.modal_info_close();
      filterApp.make();
    },
    modal_info_close: function modal_info_close() {
      Bus.$emit('modal_info_close_run');
    },
    find_in_list: function find_in_list(event, input_dom) {
      var i, item, items, len, regexp, search_target, value;

      if (event) {
        event.preventDefault();
        event.stopPropagation();
        value = event.target.value;
        search_target = event.target.dataset.search_target;
      } else {
        value = input_dom.value;
        search_target = input_dom.dataset.search_target;
      }

      regexp = new RegExp(value, 'i');
      items = [].slice.call(document.querySelectorAll("[data-search_item=\"".concat(search_target, "\"]")));

      for (i = 0, len = items.length; i < len; i++) {
        item = items[i];

        if (value === '') {
          (function (item) {
            item.classList.remove('hide');
          })(item);
        } else {
          (function (item) {
            if (regexp.test(item.dataset.value)) {
              return item.classList.remove('hide');
            } else {
              return item.classList.add('hide');
            }
          })(item);
        }
      }
    },
    filter_points_state: function filter_points_state(state) {
      if (this.filters.states[state]) {
        this.filters.states[state] = false;
        this.buttons.state_icons["st".concat(state)]["fa-circle"] = false;
        this.buttons.state_icons["st".concat(state)]["fa-circle-o"] = true;
      } else {
        this.filters.states[state] = true;
        this.buttons.state_icons["st".concat(state)]["fa-circle"] = true;
        this.buttons.state_icons["st".concat(state)]["fa-circle-o"] = false;
      }
    },
    toggle_show_dogovor_on_map: function toggle_show_dogovor_on_map() {
      if (this.filters.states.dogovors) {
        this.filters.states.dogovors = false;
        this.buttons.state_icons["dogovors"]["fa-square"] = false;
        this.buttons.state_icons["dogovors"]["fa-square-o"] = true;
      } else {
        this.filters.states.dogovors = true;
        this.buttons.state_icons["dogovors"]["fa-square"] = true;
        this.buttons.state_icons["dogovors"]["fa-square-o"] = false;
      }
    },
    filter_by_name: function filter_by_name(event) {
      var fn, self, target;
      self = this;
      target = event.target;

      if (this.timers.search_by_name) {
        clearTimeout(this.timers.search_by_name);
        this.timers.search_by_name = null;
      }

      fn = function fn() {
        var list;
        postJsonWithData("/search/by/name", {
          name: target.value
        }, function (res) {
          self.object_names = res.data;
        });
        list = document.querySelector("[data-target=\"search_with_name_object_list2\"]");

        if (target.value.length > 0) {
          list.style.display = "block";
        } else {
          list.style.display = "none";
        }
      };

      this.timers.search_by_name = setTimeout(function () {
        fn();
      }, 500);
    },
    filter_by_object_name_clear: function filter_by_object_name_clear() {
      var i, j, l, len, len1, ref, ref1, self, uid;
      self = this;
      ref = [].slice.call(document.querySelectorAll("[data-target=\"search_with_name_object_list2\"] li"));

      for (i = 0, len = ref.length; i < len; i++) {
        l = ref[i];

        (function (l) {
          var icon;
          icon = l.querySelector("i");
          icon.classList.remove('fa-check-square-o');
          icon.classList.add('fa-square-o');
        })(l);
      }

      ref1 = this.object_names_in_filters;

      for (j = 0, len1 = ref1.length; j < len1; j++) {
        uid = ref1[j];

        (function (uid) {
          filterApp.remove("orand", "byname_".concat(uid));
        })(uid);
      }

      this.object_names_in_filters = [];
      filterApp.make();
    },
    search_with_name_object_list__toggle: function search_with_name_object_list__toggle() {
      var list;
      list = document.querySelector("[data-target=\"search_with_name_object_list2\"]");

      if (list.style.display === "none") {
        list.style.display = "block";
      } else {
        list.style.display = "none";
      }
    },
    filter_by_object_name: function filter_by_object_name(object_name, event) {
      var icon, index, target, uid;
      event.preventDefault();
      event.stopPropagation();
      target = event.target;

      while (target.hasAttribute('nc') === true) {
        target = target.parentNode;
      }

      icon = target.querySelector("i");
      uid = "".concat(object_name.number, "_").concat(object_name.region_id);

      if (indexOf.call(this.object_names_in_filters, uid) >= 0) {
        icon.classList.remove('fa-check-square-o');
        icon.classList.add('fa-square-o');
        index = this.object_names_in_filters.indexOf(uid);
        this.object_names_in_filters.splice(index, 1);
        filterApp.remove("orand", "byname_".concat(uid));
      } else {
        icon.classList.add('fa-check-square-o');
        icon.classList.remove('fa-square-o');
        this.object_names_in_filters.push(uid);
        filterApp.add("orand", "byname_".concat(uid), "number", "==", "\"".concat(object_name.number, "\""));
        filterApp.add("orand", "byname_".concat(uid), "region_id", "==", "\"".concat(object_name.region_id, "\""));
      }

      filterApp.make();
    },
    change_filter: function change_filter(type, id, name, event, need_send) {
      var input_dom, self, target;
      self = this;

      if (event) {
        event.preventDefault();
        event.stopPropagation();
        target = event.target;

        while (target.hasAttribute('nc') === true) {
          target = target.parentNode;
        }
      }

      need_send = need_send != null ? need_send : true;
      this.$set(this["".concat(type, "_changed")], id, name);
      this.$delete(this["".concat(type)], id);

      if (need_send) {
        this.sync_buttons_send(type, id, true);
      }

      if (type === 'class_fps') {
        filterApp.add('andor', "".concat(type), 'class_fp_id', '==', "\"".concat(id, "\""));
      } else if (type === 'departments') {
        filterApp.add('andor', "".concat(type), 'department_id', '==', "\"".concat(id, "\""));
      } else if (type === 'services') {
        filterApp.add('andor', "".concat(type), "services.indexOf(\"".concat(id, "\")"), '>', "-1");
      } else if (type === 'companies') {
        filterApp.add('andor', "".concat(type), 'company_id', '==', "\"".concat(id, "\""));
      } else if (type === 'types') {
        filterApp.add('andor', "".concat(type), 'type_id', '==', "\"".concat(id, "\""));
      } else if (type === 'regions') {
        filterApp.add('andor', "".concat(type), 'region_id', '==', "\"".concat(id, "\""));
      }

      if (event) {
        if (target.parentNode.dataset['search_input'] != null) {
          input_dom = document.querySelector("[data-search_target=\"".concat(target.parentNode.dataset.search_input, "\"]"));

          if (input_dom.value !== '') {
            setTimeout(function () {
              self.find_in_list(null, input_dom);
            }, 500);
          } else {
            console.log("FIL:", input_dom.value, input_dom);
          }
        }
      }
    },
    unchange_filter: function unchange_filter(type, id, name, event, need_send) {
      var input_dom, self, target;
      self = this;

      if (event) {
        event.preventDefault();
        event.stopPropagation();
        target = event.target;

        while (target.hasAttribute('nc') === true) {
          target = target.parentNode;
        }
      }

      need_send = need_send != null ? need_send : true;
      this.$set(this["".concat(type)], id, name);
      this.$delete(this["".concat(type, "_changed")], id);

      if (need_send) {
        this.sync_buttons_send(type, id, false);
      }

      if (type === 'class_fps') {
        filterApp.remove('andor', "".concat(type), "\"".concat(id, "\""));
      } else if (type === 'departments') {
        filterApp.remove('andor', "".concat(type), "\"".concat(id, "\""));
      } else if (type === 'services') {
        filterApp.remove('andor', "".concat(type), "services.indexOf(\"".concat(id, "\")"), true);
      } else if (type === 'companies') {
        filterApp.remove('andor', "".concat(type), "\"".concat(id, "\""));
      } else if (type === 'types') {
        filterApp.remove('andor', "".concat(type), "\"".concat(id, "\""));
      } else if (type === 'regions') {
        filterApp.remove('andor', "".concat(type), "\"".concat(id, "\""));
      }

      if (event) {
        if (target.parentNode.dataset['search_input'] != null) {
          input_dom = document.querySelector("[data-search_target=\"".concat(target.parentNode.dataset.search_input, "\"]"));

          if (input_dom.value !== '') {
            setTimeout(function () {
              self.find_in_list(null, input_dom);
            }, 500);
          } else {
            console.log("FIL:", input_dom.value, input_dom);
          }
        }
      }
    },
    sync_buttons_send: function sync_buttons_send(type, id, status) {
      Bus.$emit('sync_buttons_side_2_run', type, id, status);
    },
    sync_buttons_get: function sync_buttons_get(type, id, status) {
      var name;

      if (status) {
        name = this["".concat(type)][id];
      } else {
        name = this["".concat(type, "_changed")][id];
      }

      if (status) {
        this.change_filter(type, id, name, null, false);
      } else {
        this.unchange_filter(type, id, name, null, false);
      }
    }
  },
  created: function created() {
    var self;
    self = this;
    getJsonData("/filters", function (res) {
      self.regions = res.data.regions;
      self.class_fps = res.data.class_fps;
      self.services = res.data.services;
      self.types = res.data.types;
      self.departments = res.data.departments;
      self.companies = res.data.companies;
    });
    Bus.$on('sync_buttons_side_1_run', this.sync_buttons_get);
  }
};

main = function main() {
  var filterApp;
  filterApp = window.filterApp = Filter.new();
  postJsonData("/templates", function (res) {
    var menu_app, tools_app;
    auth_data_app.template = res.data.vue_auth;
    Vue.component('auth', auth_data_app);
    panel_data_app.template = res.data.vue_panel;
    Vue.component('panel', panel_data_app);
    filter_panel_data_app.template = res.data.vue_filter;
    Vue.component('filter_panel', filter_panel_data_app);
    tools_data_app.template = res.data.vue_tools;
    Vue.component('tools', tools_data_app);
    tools_app = window.tools_app = new Vue({
      el: '#tools'
    });
    Vue.component('menu_nav', menu_nav_data_app);
    menu_app = window.menu_app = new Vue({
      el: '#menu_nav'
    });
  });
};
//# sourceMappingURL=data:application/json;base64,
//# sourceURL=/home/sagax_nb/fossil_riskipb.ru/app/assets_src/coffee/app.coffee